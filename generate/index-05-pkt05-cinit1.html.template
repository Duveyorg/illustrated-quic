<div class="rec-outer">
<div class="calculation client">
<div class="rec-label">Client Handshake Keys Calc</div>
<div class="rec-explanation">
    The client now has the information to calculate the
    keys that used to encrypt the rest of the handshake.  It uses the following
    information in this calculation:
    <ul>
    <li><a href="files/server-ephemeral-public.key">server public key</a> (from Server Hello)
    <li><a href="files/client-ephemeral-private.key">client private key</a> (from Client Key Exchange Generation)
    <li>SHA256 hash of ClientHello and ServerHello</li>
    </ul>
    First, the client finds the shared secret, which is the
    result of the key exchange that allows the client and server
    to agree on a number.  The client multiplies the server's
    public key with the client's private key using the curve25519()
    algorithm. The properties of elliptical curve multiplication will
    cause this to result in the same number found by the server in its
    multiplication. The 32-byte result is found to be:
    <pre class="ind2"><tt class="longboi"
    >df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624</tt></pre>

    I've provided <a href="files/curve25519-mult.c" download="curve25519-mult.c">a tool</a>
    to perform this calculation:
    <codesample>
<pre><code>$ cc -o curve25519-mult curve25519-mult.c
$ ./curve25519-mult client-ephemeral-private.key \
                    server-ephemeral-public.key | hexdump

0000000 df 4a 29 1b aa 1e b7 cf a6 93 4b 29 b4 74 ba ad
0000010 26 97 e2 9f 1f 92 0d cc 77 c8 a0 a0 88 44 76 24
</code></pre>
    </codesample>
    Since the shared secret above is the same number calculated by the
    server in "Server Handshake Keys Calc", the rest of
    the calculation is identical and the same values are found:
    <ul>
    <li>client handshake key: <tt class="longboi">30a7e816f6a1e1b3434cf39cf4b415e7</tt>
    <li>client handshake IV: <tt class="longboi">11e70a5d1361795d2bb04465</tt>
    <li>client handshake header protection key: <tt class="longboi">84b3c21cacaf9f54c885e9a506459079</tt>
    <li>server handshake key: <tt class="longboi">17abbf0a788f96c6986964660414e7ec</tt>
    <li>server handshake IV: <tt class="longboi">09597a2ea3b04c00487e71f3</tt>
    <li>server handshake header protection key: <tt class="longboi">2a18061c396c2828582b41b0910ed536</tt>
    </ul>
</div>
</div>
</div>

<div class="datagram"><span class="label">UDP Datagram 4</span>

<div class="rec-outer">
<div class="record client">
<div class="rec-label">Client Initial Packet</div>
<div class="rec-explanation">
    The client sends one more "Initial" packet, containing an ACK
    for the server's last "Initial" packet.
</div>
%file ../captures/caps/pkt05_cinit1
<span class="record-data">
    <span class="string">
        <span class="label">Packet Header Byte</span>
        <span class="bytes protected">
%next 1
%bytes
        </span>
        <span class="bytes unprotected">
c0
        </span>
        <div class="explanation">
            <button class="hp-toggle">Disable header protection</button><br>
            The packet begins with a header byte, which has header protection
            applied.  Header protection is used to hide packet numbers and other
            information from outside observers.
            <br><br>
            Header protection is applied by encrypting a sample of each packet's
            payload with the "header protection key", then XOR'ing certain bits
            and bytes in each packet with the resulting data. For "long" format
            packets such as this one, the protected sections are the lower 4 bits
            of this byte, and the bytes of the Packet Number (seen later).
            <br><br>
            An example of how to compute header protection:
            <codesample>
<pre><code>### "client header protection key" from handshake keys calc step above
$ key=6df4e9d737cdf714711d7c617ee82981
### sample is taken from 16 bytes of payload starting
### 4 bytes past the first byte of the packet number
$ sample=ed1f7b0555cdb783fbdf5b52724b7d29
$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 5 | xxd -p

8f57c29e79

### first byte of result is xor'd into lower 4 bits of this byte,
### remaining bytes are xor'd one-for-one into the bytes of
### the packet number (which in this packet is only one byte)
</code></pre>
            </codesample>
            The bits in the unprotected byte 0xC0 have the following meaning:
            <table class="bits">
            <thead><tr>
              <th></th>
              <th>Val</th>
              <th>Meaning</th>
            </tr></thead>
            <tr><td>MSB</td><td><tt>1</tt></td><td>Long header format</td></tr>
            <tr><td></td><td><tt>1</tt></td><td>Fixed bit (always set)</td></tr>
            <tr><td></td><td><tt>00</tt></td><td>Packet type: Initial</td></tr>
            <tr><td></td><td><tt>00</tt></td><td>Reserved (always unset)</td></tr>
            <tr><td>LSB</td><td><tt>00</tt></td><td>Packet Number field length (indicates the "Packet Number"<br>
                field below will have length of one byte)</td></tr>
            </table>
        </div>
    </span>

    <span class="string">
        <span class="label">QUIC Version</span>
        <span class="bytes">
%next 4
%bytes
        </span>
        <div class="explanation">
            The version of QUIC is given: version 1.
        </div>
    </span>

    <span class="string">
        <span class="label">Destination Connection ID</span>
        <span class="bytes">
%next 6
%bytes
        </span>
        <div class="explanation">
            The destination connection ID is given. This field
            allows packets for a connection to be recognized by recipients
            even if the sender's network address or NAT translation has
            changed, making it more resilient than the underlying network
            connection.
            <ul>
            <li><tt>%0</tt> - %n0 bytes of connection ID follows
            <li><tt>%1 %2 %3 %4 %5</tt> - the connection ID "<tt>s_cid</tt>"
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Source Connection ID</span>
        <span class="bytes">
%next 6
%bytes
        </span>
        <div class="explanation">
            The source connection ID is given.
            <ul>
            <li><tt>%0</tt> - %n0 bytes of connection ID follows
            <li><tt>%1 %2 %3 %4 %5</tt> - the connection ID "<tt>c_cid</tt>"
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Token</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            A token is not needed here, and is not sent.
            <ul>
            <li><tt>%0</tt> - %n0 bytes of token data follows
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Packet Length</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            The client indicates how many bytes of encrypted payload
            are in the packet.  This field is a variable length
            integer - the first two bits of the first byte
            indicate how many total bytes are in the integer.

            The first byte starts with the two bits "0 1" (0x4), which
            indicate two bytes.  The remaining bits give the number
            0x17, or 23.
        </div>
    </span>

    <span class="string">
        <span class="label">Packet Number</span>
        <span class="bytes protected">
%next 1
%bytes
        </span>
        <span class="bytes unprotected">
        01
        </span>
        <div class="explanation">
            <button class="hp-toggle">Disable header protection</button><br>
            This byte has header protection applied, see Packet Header Byte for
            details.
            <br><br>
            This byte has the unprotected value of 0x01, indicating it is packet
            1, or the second "Initial" packet sent by the client.
            <br><br>

            This data is also potentially truncated. The
            sending endpoint calculates the spread between
            the highest packet number sent and the lowest
            unacknowledged packet number, doubles that
            spread for safety, rounds up, then figures the
            number of bytes it can remove from the high
            bits of the packet number to unambiguously
            represent a number between those two ends. The
            encoded packet number is then truncated to that
            number of bytes, and the receiving endpoint
            fills in the full number based on the packet
            numbers it has most recently seen. Because our
            example conversation sends so few packets (fewer
            than 64), this truncation won't occur in this
            document.  See <a
            href="https://www.rfc-editor.org/rfc/rfc9000.html#section-17.1">RFC
            9000</a> for details.
        </div>
    </span>

    <span class="string encrypted">
        <span class="label">Encrypted Data</span>
        <span class="bytes">
%next 6
%bytes
        </span>
        <div class="explanation">
            This data is encrypted with the client "Initial" traffic key.
        </div>
    </span>
    <span class="string">
        <span class="label">Auth Tag</span>
        <span class="bytes">
%next 16
%bytes
        </span>
        <div class="explanation">
            This is the AEAD authentication tag
            that confirms the integrity of the
            encrypted data and the packet header.
        </div>
    </span>
%empty

    <div class="decryption">
        <div class="label">Decryption</div>
        <div class="explanation">
            This data is encrypted using the client
            "Initial" traffic key and IV that were
            generated during the "Initial Keys
            Calc" step.  The IV will be modified
            by XOR'ing it by the count of records that
            have already been encrypted with this key,
            which in this case is 1.  The process
            also takes as input the 21 bytes of header
            that this packet begins with, as authenticated
            data that must match for decryption to
            succeed.
            <br/><br/>
            Because the <tt>openssl</tt> command line
            tool does not yet support AEAD ciphers,
            I've written command line tools to both
            <a href="files/aes_128_gcm_decrypt.c" download="aes_128_gcm_decrypt.c">decrypt</a>
            and <a href="files/aes_128_gcm_encrypt.c" download="aes_128_gcm_encrypt.c">encrypt</a>
            this data.
            <codesample>
<pre><code>### from the "Initial Keys Calc" step
$ key=b14b918124fda5c8d79847602fa3520b
$ iv=ddbc15dea80925a55686a7df
### from this record
$ recdata=c00000000105735f63696405635f63696400401701
$ authtag=0555cdb783fbdf5b52724b7d29f0afe3
$ recordnum=1
### may need to add -I and -L flags for include and lib dirs
$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto
$ cat /tmp/msg1 \
  | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag \
  | hexdump -C

00000000  02 00 40 81 00 00                                 |..@...|
</code></pre>
            </codesample>
        </div>
    </div>

%file ../captures/caps/pkt_payload05_cinit1
    <span class="string decrypted">
        <span class="label">ACK frame</span>
        <span class="bytes">
%next 6
%bytes
        </span>
        <div class="explanation">
            The server acknowledges receipt of the client's Initial packet 0.
            <ul>
            <li><tt>%0</tt> - frame type "ACK"
            <li><tt>%1</tt> - <tt>largest_acknowledged</tt>: largest packet being acknowledged
            <li><tt>%2 %3</tt> - <tt>ack_delay</tt>: amount of time this ack was delayed in sending, in microseconds.  Multiply by 2<super>ack_delay_exponent</super>, giving a value of %dd2 * 256 = 33,024 µseconds
            <li><tt>%4</tt> - <tt>ack_range_count</tt>: the number of additional ack ranges (%d4) optionally provided below
            <li><tt>%5</tt> - <tt>first_ack_range</tt>: variable length integer giving the number of packets before <tt>largest_acknowledged</tt> that are also being acknowledged
            </ul>
        </div>
    </span>
%empty
</span>
</div>
</div>
