<div class="datagram"><span class="label">UDP Datagram 8</span>

<div class="rec-outer">
<div class="record server">
<div class="rec-label">Server Application Packet</div>
<div class="rec-explanation">
    The server, having confirmed that the client has received all pending data, shuts down the connection.
</div>
%file ../captures/caps/pkt12_sdata1
<span class="record-data">
    <span class="string">
        <span class="label">Packet Header Byte</span>
        <span class="bytes protected">
%next 1
%bytes
        </span>
        <span class="bytes unprotected">
40
        </span>
        <div class="explanation">
            <button class="hp-toggle">Disable header protection</button><br>
            The packet begins with a header byte, which has header protection
            applied.  Header protection is used to hide packet numbers and other
            information from outside observers.
            <br><br>
            Header protection is applied by encrypting a sample of each packet's
            payload with the "header protection key", then XOR'ing certain bits
            and bytes in each packet with the resulting data. For "short" format
            packets such as this one, the protected sections are the lower 5 bits
            of this byte, and the bytes of the Packet Number (seen later).
            <br><br>
            An example of how to compute header protection:
            <codesample>
<pre><code>### "server header protection key" from application keys calc step above
$ key=b7f6f021453e52b58940e4bba72a35d4
### sample is taken from 16 bytes of payload starting
### 4 bytes past the first byte of the packet number
$ sample=ffeb17b67ec27f97e50d271dc702d92c
$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 5 | xxd -p

f494fdfbb6

### first byte of result is xor'd into lower 5 bits of this byte,
### remaining bytes are xor'd one-for-one into the bytes of
### the packet number (which in this packet is only one byte)
</code></pre>
            </codesample>
            The bits in the unprotected byte 0x40 have the following meaning:
            <table class="bits">
            <thead><tr>
              <th></th>
              <th>Val</th>
              <th>Meaning</th>
            </tr></thead>
            <tr><td>MSB</td><td><tt>0</tt></td><td>Short header format</td></tr>
            <tr><td></td><td><tt>1</tt></td><td>Fixed bit (always set)</td></tr>
            <tr><td></td><td><tt>0</tt></td><td>"Spin" bit, optionally used to allow observers to measure RTT,
                but unused by this library</td></tr>
            <tr><td></td><td><tt>00</tt></td><td>Reserved (always unset)</td></tr>
            <tr><td></td><td><tt>0</tt></td><td>Key phase bit, used to signal when key rotation occurs</td></tr>
            <tr><td>LSB</td><td><tt>00</tt></td><td>Packet Number field length (indicates the "Packet Number"<br>
                field below will have length of one byte)</td></tr>
            </table>
        </div>
    </span>

    <span class="string">
        <span class="label">Destination Connection ID</span>
        <span class="bytes">
%next 5
%bytes
        </span>
        <div class="explanation">
            The destination connection ID is given. This field
            allows packets for a connection to be recognized by recipients
            even if the sender's network address or NAT translation has
            changed, making it more resilient than the underlying network
            connection.
            <br><br>
            Note that the connection ID length is not given. The peer
            must know the length, either by always using the same length,
            or by embedding its own length encoding in the ID.
            <ul>
            <li><tt>%0 %1 %2 %3 %4</tt> - the connection ID "<tt>c_cid</tt>"
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Packet Number</span>
        <span class="bytes protected">
%next 1
%bytes
        </span>
        <span class="bytes unprotected">
        01
        </span>
        <div class="explanation">
            <button class="hp-toggle">Disable header protection</button><br>
            This byte has header protection applied, see Packet Header Byte for
            details.
            <br><br>
            This byte has the unprotected value of 0x01, indicating it is packet
            1, or the second "Application" packet sent by the client.
            <br><br>

            This data is also potentially truncated. The
            sending endpoint calculates the spread between
            the highest packet number sent and the lowest
            unacknowledged packet number, doubles that
            spread for safety, rounds up, then figures the
            number of bytes it can remove from the high
            bits of the packet number to unambiguously
            represent a number between those two ends. The
            encoded packet number is then truncated to that
            number of bytes, and the receiving endpoint
            fills in the full number based on the packet
            numbers it has most recently seen. Because our
            example conversation sends so few packets (fewer
            than 64), this truncation won't occur in this
            document.  See <a
            href="https://www.rfc-editor.org/rfc/rfc9000.html#section-17.1">RFC
            9000</a> for details.
        </div>
    </span>

    <span class="string encrypted">
        <span class="label">Encrypted Data</span>
        <span class="bytes">
%next 21
%bytes
        </span>
        <div class="explanation">
            This data is encrypted with the client "Application" traffic key.
        </div>
    </span>
    <span class="string">
        <span class="label">Auth Tag</span>
        <span class="bytes">
%next 16
%bytes
        </span>
        <div class="explanation">
            This is the AEAD authentication tag
            that confirms the integrity of the
            encrypted data and the packet header.
        </div>
    </span>
%empty

    <div class="decryption">
        <div class="label">Decryption</div>
        <div class="explanation">
            This data is encrypted using the client
            key and IV that were
            generated during the "Application Keys
            Calc" step.  The IV will be modified
            by XOR'ing it by the count of records that
            have already been encrypted with this key,
            which in this case is 0.  The process
            also takes as input the 16 bytes of header
            that this packet begins with, as authenticated
            data that must match for decryption to
            succeed.
            <br/><br/>
            Because the <tt>openssl</tt> command line
            tool does not yet support AEAD ciphers,
            I've written command line tools to both
            <a href="files/aes_128_gcm_decrypt.c" download="aes_128_gcm_decrypt.c">decrypt</a>
            and <a href="files/aes_128_gcm_encrypt.c" download="aes_128_gcm_encrypt.c">encrypt</a>
            this data.
            <codesample>
<pre><code>### from the "Application Keys Calc" step
$ key=fd8c7da9de1b2da4d2ef9fd5188922d0
$ iv=02f6180e4f4aa456d7e8a602
### from this record
$ recdata=40635f63696401
$ authtag=688be9fd7b302d9eb47cdf1fc4cd9aac
$ recordnum=1
### may need to add -I and -L flags for include and lib dirs
$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto
$ cat /tmp/msg1 \
  | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag \
  | hexdump -C

00000000  1c 00 00 11 67 72 61 63  65 66 75 6c 20 73 68 75  |....graceful shu|
00000010  74 64 6f 77 6e                                    |tdown|
</code></pre>
            </codesample>
        </div>
    </div>

%file ../captures/caps/pkt_payload12_sdata1
    <span class="string decrypted">
        <span class="label">CONNECTION_CLOSE frame</span>
        <span class="bytes">
%next 21
%bytes
        </span>
        <div class="explanation">
            The server sends an indication to close the connection.
            <ul>
            <li><tt>%0</tt> - frame type "CONNECTION_CLOSE"
            <li><tt>%1</tt> - error code: "No Error"
            <li><tt>%2</tt> - frame type which triggered this error (0 = unknown)
            <li><tt>%3</tt> - variable-length integer for the length of the shutdown reason (%n3 bytes)
            <li><tt>%4</tt> - shutdown reason: the string "graceful shutdown"
            </ul>
        </div>
    </span>
%empty
</span>
</div>
</div>

</div> <!-- end of UDP datagram -->
