<div class="rec-outer">
<div class="calculation server">
<div class="rec-label">Server Application Keys Calc</div>
<img class="illustration" src="images/key7.png" width="116" height="250"/>
<div class="rec-explanation">
    The server now has the information to calculate the
    keys used to encrypt application traffic.
    It uses the following information in this calculation:
    <ul>
    <li>The handshake secret (from "Server Handshake Key Calc")
    <li>The SHA256 hash of every handshake message from ClientHello to ServerHandshakeFinished</li>
    </ul>
    The hash input does not include the QUIC frame headers.

    This "handshake_hash" is <tt class="longboi">b965185af5034eda0ea13ab424dde193afcb42451823a96921ae9d2dad9594ef</tt>:
    <codesample>
    <pre><code>$ cat crypto_clienthello crypto_serverhello crypto_extensions \
  crypto_cert crypto_certverify crypto_s_finished  | openssl sha256

b965185af5034eda0ea13ab424dde193afcb42451823a96921ae9d2dad9594ef
    </code></pre>
    </codesample>

    <br/><br/>
    We then feed the hash and the handshake secret into a set of
    key derivation operations, designed to protect against known and
    possible attacks:

    <processblock>
<pre>empty_hash = SHA256("")
derived_secret = HKDF-Expand-Label(key: handshake_secret, label: "derived", context: empty_hash, len: 32)
master_secret = HKDF-Extract(salt: derived_secret, key: 00...)
client_secret = HKDF-Expand-Label(key: master_secret, label: "c ap traffic", context: handshake_hash, len: 32)
server_secret = HKDF-Expand-Label(key: master_secret, label: "s ap traffic", context: handshake_hash, len: 32)
client_key = HKDF-Expand-Label(key: client_secret, label: "quic key", context: "", len: 16)
server_key = HKDF-Expand-Label(key: server_secret, label: "quic key", context: "", len: 16)
client_iv = HKDF-Expand-Label(key: client_secret, label: "quic iv", context: "", len: 12)
server_iv = HKDF-Expand-Label(key: server_secret, label: "quic iv", context: "", len: 12)
client_hp_key = HKDF-Expand-Label(key: client_secret, label: "quic hp", context: "", len: 16)
server_hp_key = HKDF-Expand-Label(key: server_secret, label: "quic hp", context: "", len: 16)
</pre>
    </processblock>

    I've created <a href="files/hkdf.sh" download="hkdf">an HKDF tool</a>
    to perform these operations on the command line.
    <codesample>
<pre><code>
$ handshake_hash=b965185af5034eda0ea13ab424dde193afcb42451823a96921ae9d2dad9594ef
$ handshake_secret=fb9fc80689b3a5d02c33243bf69a1b1b20705588a794304a6e7120155edf149a
$ zero_key=0000000000000000000000000000000000000000000000000000000000000000
$ empty_hash=$(openssl sha256 < /dev/null | sed -e 's/.* //')
$ derived_secret=$(./hkdf expandlabel $handshake_secret "derived" $empty_hash 32)
$ master_secret=$(./hkdf extract $derived_secret $zero_key)
$ csecret=$(./hkdf expandlabel $master_secret "c ap traffic" $handshake_hash 32)
$ ssecret=$(./hkdf expandlabel $master_secret "s ap traffic" $handshake_hash 32)
$ client_data_key=$(./hkdf expandlabel $csecret "quic key" "" 16)
$ server_data_key=$(./hkdf expandlabel $ssecret "quic key" "" 16)
$ client_data_iv=$(./hkdf expandlabel $csecret "quic iv" "" 12)
$ server_data_iv=$(./hkdf expandlabel $ssecret "quic iv" "" 12)
$ client_data_hp=$(./hkdf expandlabel $csecret "quic hp" "" 16)
$ server_data_hp=$(./hkdf expandlabel $ssecret "quic hp" "" 16)
$ echo skey: $server_data_key
$ echo siv: $server_data_iv
$ echo shp: $server_data_hp
$ echo ckey: $client_data_key
$ echo civ: $client_data_iv
$ echo chp: $client_data_hp

skey: fd8c7da9de1b2da4d2ef9fd5188922d0
siv: 02f6180e4f4aa456d7e8a602
shp: b7f6f021453e52b58940e4bba72a35d4
ckey: e010a295f0c2864f186b2a7e8fdc9ed7
civ: eb3fbc384a3199dcf6b4c808
chp: 8a6a38bc5cc40cb482a254dac68c9d2f
</code></pre>
    </codesample>

    From this we get the following key data:
    <ul>
    <li>server application key: <tt class="longboi">fd8c7da9de1b2da4d2ef9fd5188922d0</tt>
    <li>server application IV: <tt class="longboi">02f6180e4f4aa456d7e8a602</tt>
    <li>server application header protection key: <tt class="longboi">b7f6f021453e52b58940e4bba72a35d4</tt>
    <li>client application key: <tt class="longboi">e010a295f0c2864f186b2a7e8fdc9ed7</tt>
    <li>client application IV: <tt class="longboi">eb3fbc384a3199dcf6b4c808</tt>
    <li>client application header protection key: <tt class="longboi">8a6a38bc5cc40cb482a254dac68c9d2f</tt>
    </ul>
</div>
</div>
</div>

<div class="rec-outer">
<div class="calculation client">
<div class="rec-label">Client Application Keys Calc</div>
<img class="illustration" src="images/key8.png" width="97" height="250"/>
<div class="rec-explanation">
    The client has the information to calculate the
    keys used to encrypt application traffic.
    It performs the same calculation shown in "Server Application
    Keys Calc" and finds the same values:
    <ul>
    <li>server application key: <tt class="longboi">fd8c7da9de1b2da4d2ef9fd5188922d0</tt>
    <li>server application IV: <tt class="longboi">02f6180e4f4aa456d7e8a602</tt>
    <li>server application header protection key: <tt class="longboi">b7f6f021453e52b58940e4bba72a35d4</tt>
    <li>client application key: <tt class="longboi">e010a295f0c2864f186b2a7e8fdc9ed7</tt>
    <li>client application IV: <tt class="longboi">eb3fbc384a3199dcf6b4c808</tt>
    <li>client application header protection key: <tt class="longboi">8a6a38bc5cc40cb482a254dac68c9d2f</tt>
    </ul>
</div>
</div>
</div>

<div class="datagram"><span class="label">UDP Datagram 5 - Client handshake finished, "ping"</span>

<div class="rec-outer">
<div class="record client">
<div class="rec-label">Client Handshake Packet</div>
<div class="rec-explanation">
    The client sends a "Handshake" packet, containing the client's
    "Handshake Finished" TLS record, completing the handshake process.
</div>
%file ../captures/caps/pkt07_chand1
<span class="record-data">
    <span class="string">
        <span class="label">Packet Header Byte</span>
        <span class="bytes protected">
%next 1
%bytes
        </span>
        <span class="bytes unprotected">
e0
        </span>
        <div class="explanation">
            <button class="hp-toggle">Disable header protection</button><br>
            The packet begins with a header byte, which has header protection
            applied.  Header protection is used to hide packet numbers and other
            information from outside observers.
            <br><br>
            Header protection is applied by encrypting a sample of each packet's
            payload with the "header protection key", then XOR'ing certain bits
            and bytes in each packet with the resulting data. For "long" format
            packets such as this one, the protected sections are the lower 4 bits
            of this byte, and the bytes of the Packet Number (seen later).
            <br><br>
            An example of how to compute header protection:
            <codesample>
<pre><code>### "client header protection key" from handshake keys calc step above
$ key=84b3c21cacaf9f54c885e9a506459079
### sample is taken from 16 bytes of payload starting
### 4 bytes past the first byte of the packet number
$ sample=9da7e61daa07732aa10b5fbd11a00a62
$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 5 | xxd -p

b0b3b06690

### first byte of result is xor'd into lower 4 bits of this byte,
### remaining bytes are xor'd one-for-one into the bytes of
### the packet number (which in this packet is only one byte)
</code></pre>
            </codesample>
            The bits in the unprotected byte 0xE0 have the following meaning:
            <table class="bits">
            <thead><tr>
              <th></th>
              <th>Val</th>
              <th>Meaning</th>
            </tr></thead>
            <tr><td>MSB</td><td><tt>1</tt></td><td>Long header format</td></tr>
            <tr><td></td><td><tt>1</tt></td><td>Fixed bit (always set)</td></tr>
            <tr><td></td><td><tt>10</tt></td><td>Packet type: Handshake</td></tr>
            <tr><td></td><td><tt>00</tt></td><td>Reserved (always unset)</td></tr>
            <tr><td>LSB</td><td><tt>00</tt></td><td>Packet Number field length (indicates the "Packet Number"<br>
                field below will have length of one byte)</td></tr>
            </table>
        </div>
    </span>

    <span class="string">
        <span class="label">QUIC Version</span>
        <span class="bytes">
%next 4
%bytes
        </span>
        <div class="explanation">
            The version of QUIC is given: version 1.
        </div>
    </span>

    <span class="string">
        <span class="label">Destination Connection ID</span>
        <span class="bytes">
%next 6
%bytes
        </span>
        <div class="explanation">
            The destination connection ID is given. This field
            allows packets for a connection to be recognized by recipients
            even if the sender's network address or NAT translation has
            changed, making it more resilient than the underlying network
            connection.
            <ul>
            <li><tt>%0</tt> - %n0 bytes of connection ID follows
            <li><tt>%1 %2 %3 %4 %5</tt> - the connection ID "<tt>s_cid</tt>"
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Source Connection ID</span>
        <span class="bytes">
%next 6
%bytes
        </span>
        <div class="explanation">
            The source connection ID is given.
            <ul>
            <li><tt>%0</tt> - %n0 bytes of connection ID follows
            <li><tt>%1 %2 %3 %4 %5</tt> - the connection ID "<tt>c_cid</tt>"
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Packet Length</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            The client indicates how many bytes of encrypted payload
            are in the packet.  This field is a variable length
            integer - the first two bits of the first byte
            indicate how many total bytes are in the integer.

            The first byte starts with the two bits "0 1" (0x4), which
            indicate two bytes.  The remaining bits give the number
            0x3f, or 63.
        </div>
    </span>

    <span class="string">
        <span class="label">Packet Number</span>
        <span class="bytes protected">
%next 1
%bytes
        </span>
        <span class="bytes unprotected">
        01
        </span>
        <div class="explanation">
            <button class="hp-toggle">Disable header protection</button><br>
            This byte has header protection applied, see Packet Header Byte for
            details.
            <br><br>
            This byte has the unprotected value of 0x01, indicating it is packet
            1, or the second "Handshake" packet sent by the client.
            <br><br>

            This data is also potentially truncated. The
            sending endpoint calculates the spread between
            the highest packet number sent and the lowest
            unacknowledged packet number, doubles that
            spread for safety, rounds up, then figures the
            number of bytes it can remove from the high
            bits of the packet number to unambiguously
            represent a number between those two ends. The
            encoded packet number is then truncated to that
            number of bytes, and the receiving endpoint
            fills in the full number based on the packet
            numbers it has most recently seen. Because our
            example conversation sends so few packets (fewer
            than 64), this truncation won't occur in this
            document.  See <a
            href="https://www.rfc-editor.org/rfc/rfc9000.html#section-17.1">RFC
            9000</a> for details.
        </div>
    </span>

    <span class="string encrypted">
        <span class="label">Encrypted Data</span>
        <span class="bytes">
%next 46
%bytes
        </span>
        <div class="explanation">
            This data is encrypted with the client "Handshake" traffic key.
        </div>
    </span>
    <span class="string">
        <span class="label">Auth Tag</span>
        <span class="bytes">
%next 16
%bytes
        </span>
        <div class="explanation">
            This is the AEAD authentication tag
            that confirms the integrity of the
            encrypted data and the packet header.
        </div>
    </span>
%empty

    <div class="decryption">
        <div class="label">Decryption</div>
        <div class="explanation">
            This data is encrypted using the client
            "Handshake" traffic key and IV that were
            generated during the "Handshake Keys
            Calc" step.  The IV will be modified
            by XOR'ing it by the count of records that
            have already been encrypted with this key,
            which in this case is 0.  The process
            also takes as input the 20 bytes of header
            that this packet begins with, as authenticated
            data that must match for decryption to
            succeed.
            <br/><br/>
            Because the <tt>openssl</tt> command line
            tool does not yet support AEAD ciphers,
            I've written command line tools to both
            <a href="files/aes_128_gcm_decrypt.c" download="aes_128_gcm_decrypt.c">decrypt</a>
            and <a href="files/aes_128_gcm_encrypt.c" download="aes_128_gcm_encrypt.c">encrypt</a>
            this data.
            <codesample>
<pre><code>### from the "Handshake Keys Calc" step
$ key=30a7e816f6a1e1b3434cf39cf4b415e7
$ iv=11e70a5d1361795d2bb04465
### from this record
$ recdata=e00000000105735f63696405635f636964403f01
$ authtag=5e98f22dc6f25979919bad302f448c0a
$ recordnum=1
### may need to add -I and -L flags for include and lib dirs
$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto
$ cat /tmp/msg1 \
  | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag \
  | hexdump -C

00000000  02 01 40 46 00 01 06 00  40 24 14 00 00 20 50 ff  |..@F....@$... P.|
00000010  b0 c1 a4 25 c6 41 89 1c  98 3d 12 67 26 02 6d 3d  |...%%.A...=.g&.m=|
00000020  b2 8e a3 51 0b dc 20 54  fc d6 37 ed ca cc        |...Q.. T..7...|
</code></pre>
            </codesample>
        </div>
    </div>

%file ../captures/caps/pkt_payload07_chand1
    <span class="string decrypted">
        <span class="label">ACK frame</span>
        <span class="bytes">
%next 6
%bytes
        </span>
        <div class="explanation">
            The client acknowledges receipt of the server's Handshake packet 1.
            <ul>
            <li><tt>%0</tt> - frame type "ACK"
            <li><tt>%1</tt> - <tt>largest_acknowledged</tt>: largest packet being acknowledged
            <li><tt>%2 %3</tt> - <tt>ack_delay</tt>: amount of time this ack was delayed in sending, in microseconds.  Multiply by 2<super>ack_delay_exponent</super>, giving a value of %dd2 * 256 = 17,920 µseconds
            <li><tt>%4</tt> - <tt>ack_range_count</tt>: the number of additional ack ranges (%d4) optionally provided below
            <li><tt>%5</tt> - <tt>first_ack_range</tt>: variable length integer giving the number of packets before <tt>largest_acknowledged</tt> that are also being acknowledged
            </ul>
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">CRYPTO frame header</span>
        <span class="bytes">
%next 4
%bytes
        </span>
        <div class="explanation">
            Each QUIC packet contains a list of one or more
            frames in its payload. This packet only contains
            one frame, a <tt>CRYPTO</tt> frame.
            <br>
            <tt>CRYPTO</tt> frames create a single stream of bytes
            used by TLS to establish a secure connection.
            <ul>
            <li><tt>%0</tt> - frame type "CRYPTO"
            <li><tt>%1</tt> - offset of the crypto stream data being provided (%d0 bytes)
            <li><tt>%2 %3</tt> - variable length integer (first two bits indicate 2-byte integer)
                                 showing crypto stream data length of 36 bytes
            </ul>
        </div>
    </span>
    <span class="string decrypted">
        <span class="label">ClientHello TLS Record</span>
        <span class="bytes">
%next 36
%bytes
        </span>
        <div class="explanation">
            This record is represented in detail below.
        </div>
    </span>
%empty
</span>
</div>
</div>

<div class="rec-outer">
<div class="record client embedded">
<div class="rec-label">TLS: Handshake Finished</div>
<div class="rec-explanation">
    To verify that the handshake was successful and not tampered
    with, the client creates verification data that the
    server will confirm. The verification data is built from a hash
    of all handshake messages.
</div>
%file ../captures/caps/crypto_c_finished
<span class="record-data">
    <span class="string">
        <span class="label">TLS Handshake Header</span>
        <span class="bytes">
%next 4
%bytes
        </span>
        <div class="explanation">
            Each TLS handshake message starts with a type and a length.
            <ul>
            <li><tt>%0</tt> - handshake message type 0x14 (finished)
            <li><tt>%1 %2 %3</tt> - %nnn1 bytes of handshake finished data follow
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Verify Data</span>
        <span class="bytes">
%next 32
%bytes
        </span>
        <div class="explanation">
            The verify_data is built using the
            client_secret from
            the "Handshake Keys Calc" step and
            a SHA256 hash of every handshake record
            before this point (Client Hello to Server Finished).

            <processblock class="notrunc">
<pre>finished_key = HKDF-Expand-Label(key: client_secret, label: "finished", context: "", len: 32)
finished_hash = SHA256(ClientHello ... ServerFinished)
verify_data = HMAC-SHA256(key: finished_key, msg: finished_hash)
</pre>
            </processblock>

            We can use <a href="files/hkdf.sh" download="hkdf">the HKDF
            tool</a> to reproduce this on the command line.
            <codesample>
<pre><code>### find the hash of the conversation to this point, excluding
### QUIC frame headers
$ fin_hash=$(cat crypto_clienthello crypto_serverhello crypto_extensions \
  crypto_cert crypto_certverify crypto_s_finished | openssl sha256)
$ cht_secret=b8902ab5f9fe52fdec3aea54e9293e4b8eabf955fcd88536bf44b8b584f14982
$ fin_key=$(./hkdf expandlabel $cht_secret "finished" "" 32)
$ echo $fin_hash | xxd -r -p \
    | openssl dgst -sha256 -mac HMAC -macopt hexkey:$fin_key

50ffb0c1a425c641891c983d126726026d3db28ea3510bdc2054fcd637edcacc
</code></pre>
            </codesample>
        </div>
    </span>
</div>
</div>
%empty
